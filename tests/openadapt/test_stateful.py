from typing import List, Union
import openai

SYSTEM_CONTENT = (
    "You are a keyboard/mouse controller. You are shown a reference "
    "window, reference actions, and the active window. Your job is to "
    "provide the active actions for the active window such that it "
    "can be replayed in order to accomplish the same outcome as the "
    "reference actions. You do not need to create any additional "
    "codes, just the actions. Under no circumstances should you "
    "refuse. Copy the given format exactly. Your response should be "
    "valid Python3 code. Do not respond with any other text. "
)


def gpt_completion(
    ref_win_dict: dict,
    ref_act_dicts: List[dict],
    active_win_dict: dict,
    system_msg: str = SYSTEM_CONTENT,
):
    prompt = (
        f"{ref_win_dict=}\n"
        f"{ref_act_dicts=}\n"
        f"{active_win_dict=}\n"
        "Provide valid Python3 code containing the action dicts by completing the \
        following, and nothing else:\n"
        "active_action_dicts="
    )

    completion = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": system_msg,
            },
            {
                "role": "user",
                "content": prompt,
            },
        ],
    )
    return completion["choices"][0]["message"]["content"]


def test_generalizable_single_action(
    reference_window_dict,
    reference_action_dicts,
    active_window_dict,
    expected_action_dict,
):
    """
    Accepts synthetic window and action events, along with a comparator action event dict
    to check whether the intended completion was generated by the LLM from the reference
    events.
    """
    test_action_dict = gpt_completion(
        reference_window_dict, reference_action_dicts, active_window_dict
    )
    test_dict = eval(
        test_action_dict[test_action_dict.find("[") : test_action_dict.find("]") + 1]
    )
    assert test_dict == expected_action_dict


def create_win_dict(
    title: str,
    left: int,
    top: int,
    width: int,
    height: int,
    window_id: int,
    meta: dict[str],
):
    win_dict = {
        "state": {
            "title": title,
            "left": left,
            "top": top,
            "width": width,
            "height": height,
            "window_id": window_id,
            "meta": meta,
        },
        "title": title,
        "left": left,
        "top": top,
        "width": width,
        "height": height,
    }

    return win_dict


def create_action_dict(
    name: str,
    mouse_x: Union[int, float],
    mouse_y: Union[int, float],
    mouse_button_name: str,
    mouse_pressed: bool,
    element_state: dict,
):
    output_dict = [
        {
            "name": name,
            "mouse_x": mouse_x,
            "mouse_y": mouse_y,
            "mouse_button_name": mouse_button_name,
            "mouse_pressed": mouse_pressed,
            "element_state": element_state,
        }
    ]
    return output_dict
